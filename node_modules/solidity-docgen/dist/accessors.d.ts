import { EnumDefinition, ErrorDefinition, EventDefinition, FunctionDefinition, ModifierDefinition, StructDefinition, UserDefinedValueTypeDefinition, VariableDeclaration } from 'solidity-ast';
import { NatSpec } from './utils/natspec';
import { DocItemWithContext } from './site';
import { DocItem } from './doc-item';
declare type TypeDefinition = StructDefinition | EnumDefinition | UserDefinedValueTypeDefinition;
/**
 * Returns a new object with all of the item properties plus the accessors
 * applied to the item. The accessors are not reflected in the return type
 * because we assume they are only used in templates, which are untyped anyway.
 */
export declare function wrapWithAccessors(item: DocItemWithContext): DocItemWithContext;
declare type Param = {
    name: string;
    type: string;
    natspec?: string;
};
export declare const accessors: {
    type(item: DocItemWithContext): string;
    natspec(item: DocItemWithContext): NatSpec;
    name(item: DocItemWithContext): string;
    signature(item: DocItemWithContext): string | undefined;
    params(item: DocItemWithContext): Param[] | undefined;
    returns(item: DocItemWithContext): Param[] | undefined;
    items(item: DocItemWithContext): DocItem[] | undefined;
    functions(item: DocItemWithContext): FunctionDefinition[] | undefined;
    events(item: DocItemWithContext): EventDefinition[] | undefined;
    modifiers(item: DocItemWithContext): ModifierDefinition[] | undefined;
    errors(item: DocItemWithContext): ErrorDefinition[] | undefined;
    variables(item: DocItemWithContext): VariableDeclaration[] | undefined;
    types(item: DocItemWithContext): TypeDefinition[] | undefined;
};
export {};
//# sourceMappingURL=accessors.d.ts.map