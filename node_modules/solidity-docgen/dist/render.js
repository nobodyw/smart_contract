"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.itemPartialName = exports.render = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const accessors_1 = require("./accessors");
function render(site, templates, collapseNewlines) {
    const renderPage = buildRenderer(templates);
    const renderedPages = [];
    for (const page of site.pages) {
        let contents = renderPage(page, { data: { site } });
        if (collapseNewlines) {
            contents = contents.replace(/\n{3,}/g, '\n\n');
        }
        renderedPages.push({
            id: page.id,
            contents,
        });
    }
    return renderedPages;
}
exports.render = render;
const itemPartialName = (item) => accessors_1.accessors.type(item).replace(/ /g, '-').toLowerCase();
exports.itemPartialName = itemPartialName;
function itemPartial(item, options) {
    var _a;
    if (!item.__item_context) {
        throw new Error(`Partial 'item' used in unsupported context (not a doc item)`);
    }
    const partial = (_a = options === null || options === void 0 ? void 0 : options.partials) === null || _a === void 0 ? void 0 : _a[(0, exports.itemPartialName)(item)];
    if (!partial) {
        throw new Error(`Missing partial '${(0, exports.itemPartialName)(item)}'`);
    }
    return partial((0, accessors_1.wrapWithAccessors)(item), options);
}
function buildRenderer(templates) {
    var _a, _b, _c;
    const pageTemplate = (_a = templates.partials) === null || _a === void 0 ? void 0 : _a.page;
    if (pageTemplate === undefined) {
        throw new Error(`Missing 'page' template`);
    }
    const H = handlebars_1.default.create();
    for (const [name, getBody] of Object.entries((_b = templates.partials) !== null && _b !== void 0 ? _b : {})) {
        let partial;
        H.registerPartial(name, (...args) => {
            partial !== null && partial !== void 0 ? partial : (partial = H.compile(getBody()));
            return partial(...args);
        });
    }
    for (const [name, fn] of Object.entries((_c = templates.helpers) !== null && _c !== void 0 ? _c : {})) {
        H.registerHelper(name, fn);
    }
    H.registerPartial('item', itemPartial);
    return H.compile('{{>page}}');
}
//# sourceMappingURL=render.js.map