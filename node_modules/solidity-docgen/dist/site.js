"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSite = void 0;
const utils_1 = require("solidity-ast/utils");
const doc_item_1 = require("./doc-item");
const clone_1 = require("./utils/clone");
const pageAssigner = {
    single: () => 'index.md',
    items: (item) => item.name,
};
function buildSite(builds, pageStructure) {
    var _a;
    const assign = typeof pageStructure === 'string' ? pageAssigner[pageStructure] : pageStructure;
    const seen = new Set();
    const items = [];
    const pages = {};
    for (const originalBuild of builds) {
        // Clone because we will mutate in order to add item context.
        const output = (0, clone_1.clone)(originalBuild.output);
        const deref = (0, utils_1.astDereferencer)(output);
        const build = { output, deref };
        for (const { ast: file } of Object.values(build.output.sources)) {
            // Some files may appear in different builds but we only use one.
            if (seen.has(file.src))
                continue;
            seen.add(file.src);
            for (const topLevelItem of file.nodes) {
                if (!(0, doc_item_1.isDocItem)(topLevelItem))
                    continue;
                const page = assign(topLevelItem, file);
                if (page === undefined)
                    continue;
                const withContext = Object.assign(topLevelItem, {
                    __item_context: { page, node: topLevelItem, file, build },
                });
                items.push(withContext);
                ((_a = pages[page]) !== null && _a !== void 0 ? _a : (pages[page] = [])).push(withContext);
                for (const node of (0, utils_1.findAll)(doc_item_1.docItemTypes, topLevelItem)) {
                    if (node === topLevelItem)
                        continue;
                    const contract = topLevelItem.nodeType === 'ContractDefinition' ? topLevelItem : undefined;
                    const __item_context = { page, node, contract, file, build };
                    Object.assign(node, { __item_context });
                }
            }
        }
    }
    return {
        items,
        pages: Object.entries(pages).map(([id, items]) => ({ id, items })),
    };
}
exports.buildSite = buildSite;
//# sourceMappingURL=site.js.map