"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readTemplates = exports.loadTemplates = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importStar(require("fs"));
const map_keys_1 = require("./utils/map-keys");
/**
 * Loads the templates that will be used for rendering a site based on a
 * default theme and user templates.
 *
 * The result contains all partials and helpers defined in the user templates
 * and the default theme, where the user's take precedence if there is a clash.
 * Additionally, all theme partials are included with the theme prefix, e.g.
 * `markdown/contract` will be a partial.
 */
async function loadTemplates(defaultTheme, root, userTemplatesPath) {
    var _a, _b, _c, _d;
    const themes = await readThemes();
    // Initialize templates with the default theme.
    const templates = {
        partials: { ...(_a = themes[defaultTheme]) === null || _a === void 0 ? void 0 : _a.partials },
        helpers: { ...(_b = themes[defaultTheme]) === null || _b === void 0 ? void 0 : _b.helpers },
    };
    if (templates === undefined) {
        throw new Error(`Unknown theme '${defaultTheme}'`);
    }
    (_c = templates.partials) !== null && _c !== void 0 ? _c : (templates.partials = {});
    (_d = templates.helpers) !== null && _d !== void 0 ? _d : (templates.helpers = {});
    // Overwrite default theme with user templates.
    if (userTemplatesPath) {
        const userTemplates = await readTemplates(path_1.default.resolve(root, userTemplatesPath));
        if (userTemplates.partials) {
            Object.assign(templates.partials, userTemplates.partials);
        }
        if (userTemplates.helpers) {
            Object.assign(templates.helpers, userTemplates.helpers);
        }
    }
    // Add partials and helpers from all themes, prefixed with the theme name.
    for (const [themeName, theme] of Object.entries(themes)) {
        const addPrefix = (k) => `${themeName}/${k}`;
        if (theme.partials) {
            Object.assign(templates.partials, (0, map_keys_1.mapKeys)(theme.partials, addPrefix));
        }
        if (theme.helpers) {
            Object.assign(templates.helpers, (0, map_keys_1.mapKeys)(theme.helpers, addPrefix));
        }
    }
    return templates;
}
exports.loadTemplates = loadTemplates;
/**
 * Read templates and helpers from a directory.
 */
async function readTemplates(dir) {
    return {
        partials: await readPartials(dir),
        helpers: await readHelpers(dir),
    };
}
exports.readTemplates = readTemplates;
async function readPartials(dir) {
    const partials = {};
    for (const p of await fs_1.promises.readdir(dir)) {
        const { name, ext } = path_1.default.parse(p);
        if (ext === '.hbs') {
            partials[name] = () => fs_1.default.readFileSync(path_1.default.join(dir, p), 'utf8');
        }
    }
    return partials;
}
async function readHelpers(dir) {
    const h = await Promise.resolve().then(() => __importStar(require(path_1.default.join(dir, 'helpers')))).catch(() => undefined);
    if (h === undefined) {
        return undefined;
    }
    const helpers = {};
    for (const name in h) {
        if (typeof h[name] === 'function') {
            helpers[name] = h[name];
        }
    }
    return helpers;
}
/**
 * Reads all built-in themes into an object. Partials will always be found in
 * src/themes, whereas helpers may instead be found in dist/themes if TypeScript
 * can't be imported directly.
 */
async function readThemes() {
    const themes = {};
    const srcThemes = path_1.default.resolve(__dirname, '../src/themes');
    const distThemes = path_1.default.resolve(__dirname, 'themes');
    for (const theme of await fs_1.promises.readdir(srcThemes)) {
        const templates = await readTemplates(path_1.default.join(srcThemes, theme));
        if (templates.helpers === undefined) {
            templates.helpers = await readHelpers(path_1.default.join(distThemes, theme));
        }
        themes[theme] = templates;
    }
    return themes;
}
//# sourceMappingURL=templates.js.map