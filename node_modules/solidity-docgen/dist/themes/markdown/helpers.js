"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.joinLines = exports.trim = exports.hsection = exports.h = void 0;
const handlebars_1 = require("handlebars");
/**
 * Returns a Markdown heading marker. An optional number increases the heading level.
 *
 *    Input                  Output
 *    {{h}} {{name}}         # Name
 *    {{h 2}} {{name}}       ## Name
 */
function h(hsublevel) {
    ({ hsublevel } = getHSublevel(hsublevel));
    hsublevel = typeof hsublevel === 'number' ? Math.max(1, hsublevel) : 1;
    return new Array(getHLevel(this) + hsublevel - 1).fill('#').join('');
}
exports.h = h;
;
function hsection(hsublevel, opts) {
    ({ hsublevel, opts } = getHSublevel(hsublevel, opts));
    const hlevel = getHLevel(this) + hsublevel;
    const ctx = handlebars_1.Utils.extend({}, this, { hlevel });
    return opts.fn(ctx, opts);
}
exports.hsection = hsection;
function getHSublevel(hsublevel, opts) {
    if (typeof hsublevel === 'number') {
        opts = opts;
        return { hsublevel: Math.max(1, hsublevel), opts };
    }
    else {
        opts = hsublevel;
        return { hsublevel: 1, opts };
    }
}
function getHLevel(ctx) {
    var _a;
    return (_a = ctx.hlevel) !== null && _a !== void 0 ? _a : 1;
}
function trim(text) {
    if (typeof text === 'string') {
        return text.trim();
    }
}
exports.trim = trim;
function joinLines(text) {
    if (typeof text === 'string') {
        return text.replace(/\n+/g, ' ');
    }
}
exports.joinLines = joinLines;
//# sourceMappingURL=helpers.js.map